sudo: required

language: node_js

node_js:
- '6'

cache:
  directories:
  - ~/.npm

services:
- docker

matrix:
  include:
  - env: TEST_NODE_VERSION=0.10 COVER=1
    sudo: required
    services:
    - docker
  - env: TEST_NODE_VERSION=0.10 CROSSDOCK=1
    sudo: required
    services:
      - docker
  - env: TEST_NODE_VERSION=6 LINT=1
  - env: TEST_NODE_VERSION=4
  - env: TEST_NODE_VERSION=node
  - env: TEST_NODE_VERSION=0.12

env:
  global:
  - DOCKER_VERSION=1.12.0-0~trusty
  - DOCKER_COMPOSE_VERSION=1.8.0
  - COMMIT=${TRAVIS_COMMIT::8}
  # DOCKER_USER=<docker username>
  - secure: "elMJHRqjk151emHqsZ8GvP7enA3rAfbCgIdlyqTpTfR4DMv+k/Qz+5X8XMrmFeTTCqVIj5G0vgQq5FjXz2WbqAi/Y6V9wRdz6yTYc1/pAZn+CYpJ8zQhP96soYO0IJzBtPaxjcfF1AF24+zRrR5r4sLQx8US9tC7Dp4rvTk5GI7RNr1miMx80UBOEWkiN7Es84Lt8arG1aVe3I3Ge46+3dbZ28q6lPFDBEGz1FuHj0UBc4XVPJy+1yAoVV+knW15fkAggmNPS/X0GjHw/gtc6ntiFrrm/MhF+RjtS/tLcaU27Hq2rifWC1o2k8XHHxx3pLZPLCBrzZytI+LkZL680KOQo3Tohih8KF3sPL7dy8eSm0nq2a8IRXkj9UAjNDif1tO9C3C0LxRZK5NeLzRHGd5AwYEDQUkbWQpbCTkQv33uyn4tPBAO+pOzWXO93iv7oczDCnZUfTcrYV8xcC+SJHJjy3Yxs11AtV4S/d5KYbvv3vzJdsmQQqhunX7auTwXjjQk3Cpn3MBKWyxYC+4HFKbU3AGXgQmS762axoGiq5X4RjkHBXDrp28iT7MQkJniB3IF+Vy9ztc1YLAtjxCNJywWgrfSlwiy+t8Lpg5qdRFNGSipLcMCziGyyc6Xu/qN6yqlXLaSbjAr0eR6tJlbfzx9Buy6e99ltUViv3WG4Rw="
  # DOCKER_PASS=<docker password>
  - secure: "aJKL0cTNwTpO+FDA39FbV8nKu7LO0bl5qmEYIFkFLNNgA6189QqCuW6eu3txnYMWXRYvm9KpboC9ktSesY/qverOQMW28p012kJz6bXP8atbqzO909Uso40OX8wV99cB2ntdI0l7oyykXC0BFh6xFT0G2hPtwJvNE+SQZbi4lFs8zHUxVG8qEuo1vTPLgqBaS+mXj0Fe9Bzdl4ZOJviHoXSapp+QDfhVGX+7GKUcbLjxea6kEXHVVaDVT21FUOUY0c8GeSVPbs+klaX8FU9I1Rs1X3tCgZJ5/1Xrlk0Q9tq0m4HM2fiOGhybwtoPqbYus8jczk1g7yK9pYG6A2+i0g4/KujATUHohg1Jq2tStgbadkQ3RLWucY4Te3w4K1yAidyYaVy66SDmSb9MO5poakyVq8lBKTzDh2bFDp8z+EcvTDYJipnj7MGHLV/uuVQOhcofvOZ/ChG3SbdusLSGm5lU+hPETtRQcT6kGnrZo1s0ROmVVNxncwvttqPX1qb8mduDAmqBT/gPZHX6ziCnXt2U591wTPCvDGLoxqMPVv4zaFoMjXIPpUzv9nOq7oIWUrlQOro/jeadAoDWe2IWNhpHcOFclVGfZoLfK8e7gCVVMqQ+cJ7uU4F5/m/2yV3vjwFLA1j2jadtRsgMbzEo950i1NBi0C0t67GJ7FXT2G8="

before_install:
- docker version
- npm install babel-cli
- if [ "$CROSSDOCK" = "1" ]; then make install_docker_ci ; fi
# Install the Node version to test against
- nvm install $TEST_NODE_VERSION
# Switch back to build-time Node version
- nvm use $TRAVIS_NODE_VERSION

before_script:
- make build-node
- nvm use $TEST_NODE_VERSION
- node --version
- rm -rf ./node_modules package-lock.json
- npm uninstall -D husky lint-staged
- npm install

script:
- if [ "$LINT" = "1" ]; then npm run lint; fi
- if [ "$CROSSDOCK" != "1" ]; then make test-without-build; fi
- if [ "$COVER" = "1" ]; then npm run coveralls; fi
- if [ "$CROSSDOCK" = "1" ]; then make crossdock-fresh ; fi

after_script:
- nvm use $TRAVIS_NODE_VERSION

after_failure:
- if [ "$CROSSDOCK" = "1" ]; then timeout 5 make crossdock-logs ; fi

after_success:
- if [ "$CROSSDOCK" = "1" ]; then
    export REPO=jaegertracing/xdock-node;
    export BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi);
    export TAG=`if [ "$BRANCH" == "master" ]; then echo "latest"; else echo $BRANCH; fi`;
    echo "TRAVIS_BRANCH=$TRAVIS_BRANCH, REPO=$REPO, PR=$PR, BRANCH=$BRANCH, TAG=$TAG";
    export DOCKER=$(if [ "$BRANCH" == "master" ] && [ "$CROSSDOCK" == "1" ]; then echo docker; else echo true; fi);
    $DOCKER login -u $DOCKER_USER -p $DOCKER_PASS;
    $DOCKER build -f crossdock/Dockerfile -t $REPO:$COMMIT .;
    $DOCKER tag $REPO:$COMMIT $REPO:$TAG;
    $DOCKER tag $REPO:$COMMIT $REPO:travis-$TRAVIS_BUILD_NUMBER;
    $DOCKER push $REPO;
    fi
